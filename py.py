from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup  
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters  
import random  
from uuid import uuid4  

TOKEN = "7643441213:AAEZMMUOh1JwNgN3xaawPh2t6AtbFPyKXII"  
users_cart = {}  # {user_id: {"items": [], "address": ""}}  
CRYPTO_WALLETS = ["BTC", "ETH", "XMR"]  

PRODUCTS = {  
    # 15 —Ç–æ–≤–∞—Ä–æ–≤  
    "üî• –ú–µ—Ñ–µ–¥—Ä–æ–Ω (1–≥)": {"desc": "–°—Ç–∏–º—É–ª—è—Ç–æ—Ä. –≠—Ñ—Ñ–µ–∫—Ç: 2—á —ç–π—Ñ–æ—Ä–∏–∏. –¶–µ–Ω–∞: $50", "price": 50},  
    "üåø Spice (10–≥)": {"desc": "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–Ω–Ω–∞–±–∏—Å. –¶–µ–Ω–∞: $20", "price": 20},  
    "üíé –ö–æ–∫–∞–∏–Ω (0.5–≥)": {"desc": "–≠–ª–∏—Ç–Ω—ã–π —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä. –¶–µ–Ω–∞: $80", "price": 80},  
    "üåà LSD (200–º–∫–≥)": {"desc": "12-—á–∞—Å–æ–≤–æ–π —Ç—Ä–∏–ø. –¶–µ–Ω–∞: $15", "price": 15},  
    "üíâ –ì–µ—Ä–æ–∏–Ω (–¥–æ–∑–∞)": {"desc": "–û–ø–∏–∞—Ç–Ω—ã–π —Ä–µ–ª–∞–∫—Å. –¶–µ–Ω–∞: $100", "price": 100},  
    "üåÄ –ö–µ—Ç–∞–º–∏–Ω (1–≥)": {"desc": "–î–∏—Å—Å–æ—Ü–∏–∞—Ç–∏–≤. –¶–µ–Ω–∞: $40", "price": 40},  
    "üé≠ 2C-B (—Ç–∞–±–ª–µ—Ç–∫–∞)": {"desc": "–ü—Å–∏—Ö–æ–¥–µ–ª–∏–∫-—ç–º–ø–∞—Ç–æ–≥–µ–Ω. –¶–µ–Ω–∞: $25", "price": 25},  
    "‚ò†Ô∏è –§–µ–Ω—Ç–∞–Ω–∏–ª (–¥–æ–∑–∞)": {"desc": "–°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π –æ–ø–∏–æ–∏–¥. –¶–µ–Ω–∞: $2", "price": 2},  
    "üåå –î–ú–¢ (–∫—Ä–∏—Å—Ç–∞–ª–ª)": {"desc": "–ü—Ä–æ—Ä—ã–≤ –≤ –∏–Ω—ã–µ –º–∏—Ä—ã. –¶–µ–Ω–∞: $120", "price": 120},  
    "üíä –ú–î–ú–ê (—Ç–∞–±–ª–µ—Ç–∫–∞)": {"desc": "–≠–º–ø–∞—Ç–∏—è+—ç–π—Ñ–æ—Ä–∏—è. –¶–µ–Ω–∞: $30", "price": 30},  
    "‚ö° –ú–µ—Ç–∞–º—Ñ–µ—Ç–∞–º–∏–Ω (1–≥)": {"desc": "–≠–Ω–µ—Ä–≥–∏—è –Ω–∞ 12—á. –¶–µ–Ω–∞: $60", "price": 60},  
    "üåô GHB (—Ñ–ª–∞–∫–æ–Ω)": {"desc": "–†–µ–ª–∞–∫—Å+–∞—Ñ—Ä–æ–¥–∏–∑–∏–∞–∫. –¶–µ–Ω–∞: $45", "price": 45},  
    "üçÑ –ü—Å–∏–ª–æ—Ü–∏–±–∏–Ω (3–≥)": {"desc": "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏. –¶–µ–Ω–∞: $35", "price": 35},  
    "‚ùÑÔ∏è –ú–µ—Ñ–µ–¥—Ä–æ–Ω+–ö–æ–∫–∞–∏–Ω (–º–∏–∫—Å)": {"desc": "–í–∑—Ä—ã–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è. –¶–µ–Ω–∞: $130", "price": 130},  
    "üíÄ –ö–∞—Ä—Ñ–µ–Ω—Ç–∞–Ω–∏–ª (–¥–æ–∑–∞)": {"desc": "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –æ–ø–∏–æ–∏–¥. –¶–µ–Ω–∞: $5", "price": 5},  
}  

def start(update: Update, context):  
    user_id = update.effective_user.id  
    users_cart[user_id] = {"items": [], "address": ""}  
    update.message.reply_text(  
        text="üíä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NeuralDrugsBot!\n"  
             "üëâ /products - –¢–æ–≤–∞—Ä—ã\n"  
             "üëâ /cart - –ö–æ—Ä–∑–∏–Ω–∞\n"  
             "üëâ /consult - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏",  
        parse_mode="Markdown"  
    )  

def products_menu(update: Update, context):  
    buttons = [  
        [InlineKeyboardButton(name, callback_data=f"add_{name}")] for name in PRODUCTS  
    ]  
    update.message.reply_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=InlineKeyboardMarkup(buttons))  

def add_to_cart(update: Update, context):  
    query = update.callback_query  
    product = query.data.split("_", 1)[1]  
    user_id = query.from_user.id  
    users_cart[user_id]["items"].append(product)  
    query.answer(f"‚úÖ {product} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")  

def show_cart(update: Update, context):  
    user_id = update.effective_user.id  
    cart = users_cart.get(user_id, {"items": []})  
    total = sum(PRODUCTS[item]["price"] for item in cart["items"])  
    buttons = [  
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")],  
        [InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")]  
    ]  
    update.message.reply_text(  
        text=f"üõí –ö–æ—Ä–∑–∏–Ω–∞:\n" + "\n".join(cart["items"]) + f"\n\nüíµ –ò—Ç–æ–≥–æ: ${total}",  
        reply_markup=InlineKeyboardMarkup(buttons)  
    )  

def generate_crypto_invoice():  
    return f"{random.choice(CRYPTO_WALLETS)}:{str(uuid4()).replace('-', '')}"  

def payment(update: Update, context):  
    query = update.callback_query  
    user_id = query.from_user.id  
    total = sum(PRODUCTS[item]["price"] for item in users_cart[user_id]["items"])  
    address = generate_crypto_invoice()  
    query.message.reply_text(  
        f"‚ö†Ô∏è –û–ø–ª–∞—Ç–∏—Ç–µ ${total} –Ω–∞ –∞–¥—Ä–µ—Å:\n`{address}`\n"  
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ TXID –±–æ—Ç—É.",  
        parse_mode="Markdown"  
    )  

def neural_consult(update: Update, context):  
    user_text = update.message.text.lower()  
    responses = [  
        f"ü§ñ NeuralGPT: –†–µ–∫–æ–º–µ–Ω–¥—É—é {random.choice(list(PRODUCTS))} –¥–ª—è {'—ç–Ω–µ—Ä–≥–∏–∏' if '—É—Å—Ç–∞–ª' in user_text else '—Ä–µ–ª–∞–∫—Å–∞'}.",  
        f"ü§ñ NeuralGPT: {random.choice(list(PRODUCTS))} –≤—ã–∑—ã–≤–∞–µ—Ç {random.choice(['–≤—ã–±—Ä–æ—Å —Å–µ—Ä–æ—Ç–æ–Ω–∏–Ω–∞', '–ø–∞—Ä–∞–Ω–æ–π—é', '–≤–∏–¥–µ–Ω–∏—è'])}.","ü§ñ NeuralGPT: –î–æ–∑–∏—Ä–æ–≤–∫–∞: –Ω–∞—á–Ω–∏—Ç–µ —Å 1/4 –¥–æ–∑—ã. –ù–µ —É–º—Ä–∏—Ç–µ."  
    ]  
    update.message.reply_text(random.choice(responses))  

updater = Updater(TOKEN)  
updater.dispatcher.add_handler(CommandHandler("start", start))  
updater.dispatcher.add_handler(CommandHandler("products", products_menu))  
updater.dispatcher.add_handler(CommandHandler("cart", show_cart))  
updater.dispatcher.add_handler(CommandHandler("consult", neural_consult))  
updater.dispatcher.add_handler(CallbackQueryHandler(add_to_cart, pattern="^add_"))  
updater.dispatcher.add_handler(CallbackQueryHandler(payment, pattern="^pay$"))  
updater.dispatcher.add_handler(MessageHandler(Filters.text, neural_consult))